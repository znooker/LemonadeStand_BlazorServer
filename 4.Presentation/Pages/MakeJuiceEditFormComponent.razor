@page "/EditForm"
@using System.Collections.ObjectModel;

@using _1.Domain.Fruits;
@using _1.Domain.Recipies;
@using _2.Application;
@using _2.Application.Models;
@using _2.Application.Extentions;
@inject IFruitPressService FruitePress;
@inject NavigationManager uriHelper;




<h3>JuiceBar Menu - EditForm</h3>

<JuiceMenuComponent />
@if (Result.IsSuccess)
{
    <AlertResultComponent Result="@Result" />
}
@if (!valid)
{
    <EditForm Model="@Order" OnValidSubmit="@SumbitValidForm">
        <FluentValidationValidator />
       
        <div class="container d-flex justify-content-center card shadow w-50">
            
            <ValidationMessage For="() => Order.ValidFruitsInRecipe" />
            <div class="mb-3">
                <label for="Recipe" class="form-lable">Select Recipe</label>
                <select class="form-control" @onchange="OnSelectRecipeChange">
                    <option disabled selected>Select a Recipe</option>
                    @foreach (var recipe in Recipes)
                    {
                        <option value="@recipe.Name">@recipe.Name</option>
                    }
                </select>
                <ValidationMessage For="() => Order.SelectedRecipe" />
            </div>
            @if (Order.SelectedRecipe is not null)
            {
                
                <div class="mb-3">
                    <lable for="Quantity" class="form-lable">Order Quantity</lable>
                    <InputNumber class="form-control" placeholder="Enter Amount" @bind-Value=Order.GlassesToServe />
                    <ValidationMessage For="() => Order.GlassesToServe" />
                </div>
                <div class="mb-3">
                    <label for="Money" class="form-lable">Money Paid</label>
                    <InputNumber class="form-control" placeholder="Enter Amount" @bind-Value=Order.MoneyPaid></InputNumber>
                    <ValidationMessage For="()=> Order.MoneyPaid" />

                </div>
                <ValidationMessage For="() => Order.Fruits" />
                <div class="mb-3">
                    <label for="Apple" class="form-lable">Apples</label>
                    <input type="number" min="0" class="form-control" placeholder="Add Apples" @onchange="OnAppleAmountChange"></input>
                 
                </div>

                <div class="mb-3">
                    <label for="Apple" class="form-lable">Oranges</label>
                    <input type="number" min="0" class="form-control" placeholder="Add Oranges" @onchange="OnOrangeAmountChange"></input>
                    
                </div>

                <div class="mb-3">
                    <label for="Apple" class="form-lable">Melons</label>
                    <input type="number" min="0" class="form-control" placeholder="Add Melons" @onchange="OnMelonAmountChange"></input>
                  
                </div>

                <div class="mb-3">
                    <button class="btn btn-primary"> Make me a juicy juice!</button>
                    <button class="btn btn-secondary" @onclick="Reset">Reset Form</button>
                </div>
            }
           

        </div>



    </EditForm>
}

@code {

    //private EditContext editContext;
    //private ValidationMessageStore validationMessages;
    public List<IRecipe> Recipes { get; set; }
    public OrderModel Order { get; set; }
    private Collection<IFruit> Fruits { get; set; }
    private FruitPressResult Result { get; set; } = new();


    bool valid;
    bool validRecipe;


    protected override void OnInitialized()
    {
        OrderModel order = new();
        Order = order;
        JuiceMenu menu = new();
        Recipes = menu.Recipies;
        Collection<IFruit> fruits = new();
        Fruits = fruits;

        base.OnInitialized();

    }

    public void Reset()
    {
        Order = new();
        uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
    }


    private void OnAppleAmountChange(ChangeEventArgs obj)
    {
        
        int input = int.Parse(obj.Value.ToString());

        Order.Fruits = Order.Fruits.UpdateFruits(input, typeof(Apple));
        Fruits = Order.Fruits.ConvertToCollection();
    }

    private void OnOrangeAmountChange(ChangeEventArgs obj)
    {

        int input = int.Parse(obj.Value.ToString());

        Order.Fruits = Order.Fruits.UpdateFruits(input, typeof(Orange));
        Fruits = Order.Fruits.ConvertToCollection();
    }

    private void OnMelonAmountChange(ChangeEventArgs obj)
    {

        int input = int.Parse(obj.Value.ToString());

        Order.Fruits = Order.Fruits.UpdateFruits(input, typeof(Melon));
        Fruits = Order.Fruits.ConvertToCollection();
    }


    private void OnSelectRecipeChange(ChangeEventArgs obj)
    {
        Order.SelectedRecipe = Recipes.FirstOrDefault(r => r.Name.ToLower() == obj.Value.ToString().ToLower());

    }

    public void SumbitValidForm()
     {
   


        //if (valid && validRecipe)
        //{
        //try
        //{

        //}
        //catch (Exception)
        //{

        //    throw;
        //}
        //No nullcheck on (int)Order.MoneyPaid, (int)Order.GlassesToServe they should be set or the validation won't pass

       
        valid = true;
        Result = FruitePress.Produce(Order.SelectedRecipe, Fruits, (int)Order.MoneyPaid, (int)Order.GlassesToServe);

        //Reset Form
        Order = new();


        //}


        
        //validationMessages.Clear();
        //valid = Order.Validate(OrderModel);

        //var SelectedRecipe = Recipes.FirstOrDefault(r => r.Name == Order.SelectedRecipeName);
        //var moneyPaid = Order.Field(nameof(Order.MoneyPaid));
        //var recipeName = editContext.Field(nameof(Order.SelectedRecipeName));
        //var appleAmount = editContext.Field(nameof(Order.Apples));
        //var orangeAmount = editContext.Field(nameof(Order.Oranges));
        //var melonAmount = editContext.Field(nameof(Order.Melons));
        //var invalidFruitmix = editContext.Field(nameof(Order.InvalidFruitMix));


        //if (!string.IsNullOrEmpty(Order.SelectedRecipeName))
        //{
        //    foreach (var recipe in Recipes)
        //    {

        //        if ((recipe.PricePerGlass * Order.GlassesToServe) > Order.MoneyPaid && (recipe.Name == SelectedRecipe.Name))
        //        {
        //            validationMessages.Add(moneyPaid, $"More money is needed to process the order! The order total is {recipe.PricePerGlass * Order.GlassesToServe} dollares!\nYou are lacking {(recipe.PricePerGlass * Order.GlassesToServe) - Order.MoneyPaid} dollares!");
        //            valid = false;
        //        }

        //        if (SelectedRecipe.AllowedFruit != recipe.AllowedFruit)
        //        {

        //        }

        //    }
        //    //kolla med (fruits.All(f => f.GetType() == recipe.AllowedFruit) == false), eller liknande?
        //    //Apples
        //    var ammounttest = SelectedRecipe.ConsumptionPerGlass * Order.GlassesToServe;
        //    if ((SelectedRecipe.ConsumptionPerGlass * Order.GlassesToServe) > Order.Apples && (SelectedRecipe.AllowedFruit.Name.ToLower() == "apple"))
        //    {
        //        validationMessages.Add(appleAmount, $"Need more {SelectedRecipe.AllowedFruit.Name}(s) The total needed {SelectedRecipe.ConsumptionPerGlass * Order.GlassesToServe} {SelectedRecipe.AllowedFruit.Name}(s)!");
        //        valid = false;
        //    }

        //    //Orange
        //    if ((SelectedRecipe.ConsumptionPerGlass * Order.GlassesToServe) > Order.Oranges && (SelectedRecipe.AllowedFruit.Name.ToLower() == "orange"))
        //    {
        //        validationMessages.Add(orangeAmount, $"Need more {SelectedRecipe.AllowedFruit.Name}(s) The total needed {SelectedRecipe.ConsumptionPerGlass * Order.GlassesToServe} {SelectedRecipe.AllowedFruit.Name}(s)!");
        //        valid = false;
        //    }

        //    //Melon
        //    if ((SelectedRecipe.ConsumptionPerGlass * Order.GlassesToServe) > Order.Melons && (SelectedRecipe.AllowedFruit.Name.ToLower() == "melon"))
        //    {
        //        validationMessages.Add(melonAmount, $"Need more {SelectedRecipe.AllowedFruit.Name}(s) The total needed {SelectedRecipe.ConsumptionPerGlass * Order.GlassesToServe} {SelectedRecipe.AllowedFruit.Name}(s)!");
        //        valid = false;
        //    }

        //    //Adds all fruits to a list
        //    for (int i = 0; i < Order.Apples; i++)
        //    {
        //        Apple apple = new();
        //        Fruits.Add(apple);
        //    }
        //    for (int i = 0; i < Order.Oranges; i++)
        //    {
        //        Orange orange = new();
        //        Fruits.Add(orange);
        //    }
        //    for (int i = 0; i < Order.Melons; i++)
        //    {
        //        Melon melon = new();
        //        Fruits.Add(melon);
        //    }

        //    //Check so fruits match selected recipe
        //    validRecipe = FruitBlender(Fruits, SelectedRecipe);


        //}
        //if (!validRecipe)
        //{
        //    validationMessages.Add(invalidFruitmix, "Invalid fruitmix, does not match recipe");
        //    valid = false;
        //}

        //if (valid && validRecipe)
        //{
            //try
            //{

            //}
            //catch (Exception)
            //{

            //    throw;
            //}
            //No nullcheck on (int)Order.MoneyPaid, (int)Order.GlassesToServe they should be set or the validation won't pass
            //Result = FruitePress.Produce(SelectedRecipe, Fruits, (int)Order.MoneyPaid, (int)Order.GlassesToServe);

            //Reset Form
            //Order = new();


        //}


    }

    private bool FruitBlender(Collection<IFruit> fruits, IRecipe recipe)
    {
        if ((fruits.All(f => f.GetType() == recipe.AllowedFruit) == false))
        {
            return false;
        }
        return true;
    }


}
