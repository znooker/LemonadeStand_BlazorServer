@page "/EditForm"
@using System.Collections.ObjectModel;

@using _1.Domain.Fruits;
@using _1.Domain.Recipies;
@using _2.Application;
@using _2.Application.Models;
@using _2.Application.Extentions;
@inject IFruitPressService FruitePress;
@inject NavigationManager uriHelper;




<h3>JuiceBar Menu - EditForm</h3>

<JuiceMenuComponent />
@if (Result.IsSuccess)
{
    <AlertResultComponent Result="@Result" />
}
@if (!valid)
{
    <EditForm Model="@Order" OnValidSubmit="@SumbitValidForm">
        <FluentValidationValidator />

        <div class="container d-flex justify-content-center card shadow w-50">


            <div class="mb-3">
                <label for="Recipe" class="form-lable">Select Recipe</label>
                <select class="form-control" @onchange="OnSelectRecipeChange">
                    <option disabled selected>Select a Recipe</option>
                    @foreach (var recipe in Recipes)
                    {
                        <option value="@recipe.Name">@recipe.Name</option>
                    }
                </select>
                <ValidationMessage For="() => Order.SelectedRecipe" />
            </div>
            @if (Order.SelectedRecipe is not null)
            {

                <div class="mb-3">
                    <lable for="Quantity" class="form-lable">Order Quantity</lable>
                    <InputNumber class="form-control" placeholder="Enter Amount" @bind-Value=Order.GlassesToServe />
                    <ValidationMessage For="() => Order.GlassesToServe" />
                </div>
                <div class="mb-3">
                    <label for="Money" class="form-lable">Money Paid</label>
                    <InputNumber class="form-control" placeholder="Enter Amount" @bind-Value=Order.MoneyPaid></InputNumber>
                    <ValidationMessage For="()=> Order.MoneyPaid" />

                </div>
                <ValidationMessage For="() => Order.Fruits" />
                <div class="mb-3">
                    <label for="Apple" class="form-lable">Apples</label>
                    <input type="number" min="0" class="form-control" placeholder="Add Apples" @onchange="OnAppleAmountChange"></input>

                </div>

                <div class="mb-3">
                    <label for="Apple" class="form-lable">Oranges</label>
                    <input type="number" min="0" class="form-control" placeholder="Add Oranges" @onchange="OnOrangeAmountChange"></input>

                </div>

                <div class="mb-3">
                    <label for="Apple" class="form-lable">Melons</label>
                    <input type="number" min="0" class="form-control" placeholder="Add Melons" @onchange="OnMelonAmountChange"></input>

                </div>

                <div class="mb-3">
                    <button class="btn btn-primary"> Make me a juicy juice!</button>
                    <button class="btn btn-secondary" @onclick="Reset">Reset Form</button>
                </div>
            }


        </div>



    </EditForm>
}

@code {


    public List<IRecipe> Recipes { get; set; }
    public OrderModel Order { get; set; }
    private Collection<IFruit> Fruits { get; set; }
    private FruitPressResult Result { get; set; } = new();


    bool valid;
    bool validRecipe;


    protected override void OnInitialized()
    {
        OrderModel order = new();
        Order = order;
        JuiceMenu menu = new();
        Recipes = menu.Recipies;
        Collection<IFruit> fruits = new();
        Fruits = fruits;

        base.OnInitialized();

    }

    public void Reset()
    {
        Order = new();
        uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
    }


    private void OnAppleAmountChange(ChangeEventArgs obj)
    {
        int input = obj.Value.ToString().ParseValueOrReturnZero();

        Order.Fruits = Order.Fruits.UpdateFruits(input, typeof(Apple));
        Fruits = Order.Fruits.ConvertListToCollection();

    }

    private void OnOrangeAmountChange(ChangeEventArgs obj)
    {
        int input = obj.Value.ToString().ParseValueOrReturnZero();

        Order.Fruits = Order.Fruits.UpdateFruits(input, typeof(Orange));
        Fruits = Order.Fruits.ConvertListToCollection();

    }

    private void OnMelonAmountChange(ChangeEventArgs obj)
    {
        int input = obj.Value.ToString().ParseValueOrReturnZero();

        Order.Fruits = Order.Fruits.UpdateFruits(input, typeof(Melon));
        Fruits = Order.Fruits.ConvertListToCollection();

    }


    private void OnSelectRecipeChange(ChangeEventArgs obj)
    {
        Order.SelectedRecipe = Recipes.FirstOrDefault(r => r.Name.ToLower() == obj.Value.ToString().ToLower());

    }

    public void SumbitValidForm()
    {


        valid = true;
        Result = FruitePress.Produce(Order.SelectedRecipe, Fruits, (int)Order.MoneyPaid, (int)Order.GlassesToServe);

        //Reset Form
        Order = new();




    }
}